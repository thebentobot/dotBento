name: Docker - Release

env:
  HUSKY: 0

on:
  release:
    types: [published]  # This will trigger on both releases and pre-releases

jobs:
  docker-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.release.prerelease == false }}  # Run only if it's an actual release, not a pre-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set Release Tag
        run: |
          NEW_TAG="${{ github.event.release.tag_name }}"  # Use the tag name from the release
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/thebentobot/dotbento
          tags: |
            type=raw,value=${{ env.NEW_TAG }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Build and Push to Production
        uses: docker/build-push-action@v6
        with:
          file: src/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            USER_DIR="/${{ secrets.PROD_SERVER_USERNAME }}"
            
            # Update the docker-compose.yml file to use the stable version tag (e.g., v1.0.0)
            sed -i 's|ghcr.io/thebentobot/dotbento:[^ ]*|ghcr.io/thebentobot/dotbento:${{ env.NEW_TAG }}|' $USER_DIR/bento/docker-compose.yml

            # Stop and remove any existing instance of the production bot
            docker compose -f $USER_DIR/bento/docker-compose.yml down bot-prod || true
            docker compose -f $USER_DIR/bento/docker-compose.yml rm -f bot-prod || true

            # Pull the new image and redeploy the production bot
            docker compose -f $USER_DIR/bento/docker-compose.yml pull bot-prod
            docker compose -f $USER_DIR/bento/docker-compose.yml up -d bot-prod