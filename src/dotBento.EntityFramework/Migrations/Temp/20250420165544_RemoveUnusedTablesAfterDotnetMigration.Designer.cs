// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dotBento.EntityFramework.Context;

#nullable disable

namespace dotBento.EntityFramework.Migrations.Temp
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250420165544_RemoveUnusedTablesAfterDotnetMigration")]
    partial class RemoveUnusedTablesAfterDotnetMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("bento_bentoDate_seq");

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Bento", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<int>("Bento1")
                        .HasColumnType("integer")
                        .HasColumnName("bento");

                    b.Property<DateTime>("BentoDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bentoDate")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId")
                        .HasName("bento_pk");

                    b.HasIndex(new[] { "UserId" }, "bento_userid_uindex")
                        .IsUnique();

                    b.ToTable("bento", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Guild", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("GuildName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guildName");

                    b.Property<string>("Icon")
                        .HasColumnType("character varying")
                        .HasColumnName("icon");

                    b.Property<bool>("Leaderboard")
                        .HasColumnType("boolean")
                        .HasColumnName("leaderboard");

                    b.Property<bool>("Media")
                        .HasColumnType("boolean")
                        .HasColumnName("media");

                    b.Property<int?>("MemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("memberCount");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("prefix");

                    b.Property<bool>("Tiktok")
                        .HasColumnType("boolean")
                        .HasColumnName("tiktok");

                    b.HasKey("GuildId")
                        .HasName("guild_pk");

                    b.HasIndex(new[] { "GuildId" }, "guild_guildid_uindex")
                        .IsUnique();

                    b.ToTable("guild", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.GuildMember", b =>
                {
                    b.Property<long>("GuildMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guildMemberID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GuildMemberId"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("avatarURL");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("GuildMemberId")
                        .HasName("guildmember_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "GuildMemberId" }, "guildmember_guildmemberid_uindex")
                        .IsUnique();

                    b.ToTable("guildMember", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Lastfm", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("Lastfm1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastfm");

                    b.HasKey("UserId")
                        .HasName("lastfm_pk");

                    b.HasIndex(new[] { "UserId" }, "lastfm_userid_uindex")
                        .IsUnique();

                    b.ToTable("lastfm", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Patreon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar");

                    b.Property<bool>("Disciple")
                        .HasColumnType("boolean")
                        .HasColumnName("disciple");

                    b.Property<string>("EmoteSlot1")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot1");

                    b.Property<string>("EmoteSlot2")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot2");

                    b.Property<string>("EmoteSlot3")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot3");

                    b.Property<string>("EmoteSlot4")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot4");

                    b.Property<bool>("Enthusiast")
                        .HasColumnType("boolean")
                        .HasColumnName("enthusiast");

                    b.Property<bool>("Follower")
                        .HasColumnType("boolean")
                        .HasColumnName("follower");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<bool>("Sponsor")
                        .HasColumnType("boolean")
                        .HasColumnName("sponsor");

                    b.Property<bool>("Supporter")
                        .HasColumnType("boolean")
                        .HasColumnName("supporter");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("Id")
                        .HasName("patreon_pk");

                    b.HasIndex(new[] { "Id" }, "patreon_id_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "patreon_userid_uindex")
                        .IsUnique();

                    b.ToTable("patreon", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.PrismaMigration", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<int>("AppliedStepsCount")
                        .HasColumnType("integer")
                        .HasColumnName("applied_steps_count");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("checksum");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("Logs")
                        .HasColumnType("text")
                        .HasColumnName("logs");

                    b.Property<string>("MigrationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("migration_name");

                    b.Property<DateTime?>("RolledBackAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rolled_back_at");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("_prisma_migrations_pkey");

                    b.ToTable("_prisma_migrations", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Profile", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("BackgroundColour")
                        .HasColumnType("character varying")
                        .HasColumnName("backgroundColour");

                    b.Property<int?>("BackgroundColourOpacity")
                        .HasColumnType("integer");

                    b.Property<string>("BackgroundUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("backgroundUrl");

                    b.Property<string>("Birthday")
                        .HasColumnType("character varying")
                        .HasColumnName("birthday");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionColour")
                        .HasColumnType("character varying")
                        .HasColumnName("descriptionColour");

                    b.Property<int?>("DescriptionColourOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("descriptionColourOpacity");

                    b.Property<string>("DiscriminatorColour")
                        .HasColumnType("character varying")
                        .HasColumnName("discriminatorColour");

                    b.Property<string>("FmArtistTextColour")
                        .HasColumnType("character varying")
                        .HasColumnName("fmArtistTextColour");

                    b.Property<int?>("FmArtistTextOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("fmArtistTextOpacity");

                    b.Property<string>("FmDivBgcolour")
                        .HasColumnType("character varying")
                        .HasColumnName("fmDivBGColour");

                    b.Property<int?>("FmDivBgopacity")
                        .HasColumnType("integer")
                        .HasColumnName("fmDivBGOpacity");

                    b.Property<string>("FmSongTextColour")
                        .HasColumnType("character varying")
                        .HasColumnName("fmSongTextColour");

                    b.Property<int?>("FmSongTextOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("fmSongTextOpacity");

                    b.Property<bool?>("LastfmBoard")
                        .HasColumnType("boolean")
                        .HasColumnName("lastfmBoard");

                    b.Property<string>("OverlayColour")
                        .HasColumnType("character varying")
                        .HasColumnName("overlayColour");

                    b.Property<int?>("OverlayOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("overlayOpacity");

                    b.Property<int?>("SidebarBlur")
                        .HasColumnType("integer")
                        .HasColumnName("sidebarBlur");

                    b.Property<string>("SidebarColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarColour");

                    b.Property<string>("SidebarItemBentoColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemBentoColour");

                    b.Property<string>("SidebarItemGlobalColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemGlobalColour");

                    b.Property<string>("SidebarItemServerColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemServerColour");

                    b.Property<string>("SidebarItemTimezoneColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemTimezoneColour");

                    b.Property<int?>("SidebarOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("sidebarOpacity");

                    b.Property<string>("SidebarValueBentoColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarValueBentoColour");

                    b.Property<string>("SidebarValueGlobalColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarValueGlobalColour");

                    b.Property<string>("SidebarValueServerColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarValueServerColour");

                    b.Property<string>("Timezone")
                        .HasColumnType("character varying")
                        .HasColumnName("timezone");

                    b.Property<string>("UsernameColour")
                        .HasColumnType("character varying")
                        .HasColumnName("usernameColour");

                    b.Property<string>("XpBar2Colour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpBar2Colour");

                    b.Property<int?>("XpBar2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpBar2Opacity");

                    b.Property<string>("XpBarColour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpBarColour");

                    b.Property<int?>("XpBarOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpBarOpacity");

                    b.Property<bool?>("XpBoard")
                        .HasColumnType("boolean")
                        .HasColumnName("xpBoard");

                    b.Property<string>("XpDivBgcolour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDivBGColour");

                    b.Property<int?>("XpDivBgopacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDivBGOpacity");

                    b.Property<string>("XpDoneGlobalColour1")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneGlobalColour1");

                    b.Property<int?>("XpDoneGlobalColour1Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneGlobalColour1Opacity");

                    b.Property<string>("XpDoneGlobalColour2")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneGlobalColour2");

                    b.Property<int?>("XpDoneGlobalColour2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneGlobalColour2Opacity");

                    b.Property<string>("XpDoneGlobalColour3")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneGlobalColour3");

                    b.Property<int?>("XpDoneGlobalColour3Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneGlobalColour3Opacity");

                    b.Property<string>("XpDoneServerColour1")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneServerColour1");

                    b.Property<int?>("XpDoneServerColour1Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneServerColour1Opacity");

                    b.Property<string>("XpDoneServerColour2")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneServerColour2");

                    b.Property<int?>("XpDoneServerColour2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneServerColour2Opacity");

                    b.Property<string>("XpDoneServerColour3")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneServerColour3");

                    b.Property<int?>("XpDoneServerColour3Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneServerColour3Opacity");

                    b.Property<string>("XpText2Colour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpText2Colour");

                    b.Property<int?>("XpText2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpText2Opacity");

                    b.Property<string>("XpTextColour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpTextColour");

                    b.Property<int?>("XpTextOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpTextOpacity");

                    b.HasKey("UserId")
                        .HasName("profile_pk");

                    b.HasIndex(new[] { "UserId" }, "profile_userid_uindex")
                        .IsUnique();

                    b.ToTable("profile", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Reminder1")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("reminder");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("Id")
                        .HasName("reminder_pk");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "reminder_id_uindex")
                        .IsUnique();

                    b.ToTable("reminder", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RpsGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PaperLosses")
                        .HasColumnType("integer")
                        .HasColumnName("paperLosses");

                    b.Property<int?>("PaperTies")
                        .HasColumnType("integer")
                        .HasColumnName("paperTies");

                    b.Property<int?>("PaperWins")
                        .HasColumnType("integer")
                        .HasColumnName("paperWins");

                    b.Property<int?>("RockLosses")
                        .HasColumnType("integer")
                        .HasColumnName("rockLosses");

                    b.Property<int?>("RockTies")
                        .HasColumnType("integer")
                        .HasColumnName("rockTies");

                    b.Property<int?>("RockWins")
                        .HasColumnType("integer")
                        .HasColumnName("rockWins");

                    b.Property<int?>("ScissorWins")
                        .HasColumnType("integer")
                        .HasColumnName("scissorWins");

                    b.Property<int?>("ScissorsLosses")
                        .HasColumnType("integer")
                        .HasColumnName("scissorsLosses");

                    b.Property<int?>("ScissorsTies")
                        .HasColumnType("integer")
                        .HasColumnName("scissorsTies");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("Id")
                        .HasName("rpsgame_pk");

                    b.HasIndex(new[] { "Id" }, "rpsgame_id_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "rpsgame_userid_uindex")
                        .IsUnique();

                    b.ToTable("rpsGame", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tagID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TagId"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("command");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("TagId")
                        .HasName("tag_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TagId" }, "tag_tagid_uindex")
                        .IsUnique();

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("avatarURL");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("discriminator");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Username")
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("UserId")
                        .HasName("user_pk");

                    b.HasIndex(new[] { "UserId" }, "user_userid_uindex")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Weather", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.HasKey("UserId")
                        .HasName("weather_pk");

                    b.HasIndex(new[] { "UserId" }, "weather_userid_uindex")
                        .IsUnique();

                    b.ToTable("weather", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Bento", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Bento")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Bento", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bento_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.GuildMember", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("GuildMembers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("guildmember_guild_guildid_fk");

                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithMany("GuildMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("guildmember_user_userid_fk");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Lastfm", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Lastfm")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Lastfm", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lastfm_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Patreon", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Patreon")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Patreon", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("patreon_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Profile", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("profile_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Reminder", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reminder_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RpsGame", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("RpsGame")
                        .HasForeignKey("dotBento.EntityFramework.Entities.RpsGame", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rpsgame_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Tag", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("Tags")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tag_guild_guildid_fk");

                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tag_user_userid_fk");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Weather", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Weather")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Weather", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("weather_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Guild", b =>
                {
                    b.Navigation("GuildMembers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.User", b =>
                {
                    b.Navigation("Bento");

                    b.Navigation("GuildMembers");

                    b.Navigation("Lastfm");

                    b.Navigation("Patreon");

                    b.Navigation("Profile");

                    b.Navigation("Reminders");

                    b.Navigation("RpsGame");

                    b.Navigation("Tags");

                    b.Navigation("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
