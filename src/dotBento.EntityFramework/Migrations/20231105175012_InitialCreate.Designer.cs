// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dotBento.EntityFramework.Context;

#nullable disable

namespace dotBento.EntityFramework.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20231105175012_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "horos", new[] { "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "roletypes", new[] { "main", "sub", "other" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("bento_bentoDate_seq");

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AnnouncementSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channelID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("message");

                    b.HasKey("Id")
                        .HasName("announcementschedule_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "Id" }, "announcementschedule_id_uindex")
                        .IsUnique();

                    b.ToTable("announcementSchedule", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AnnouncementTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountOfTime")
                        .HasColumnType("integer")
                        .HasColumnName("amountOfTime");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channelID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("message");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("timeframe");

                    b.HasKey("Id")
                        .HasName("announcementtime_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "Id" }, "announcementtime_id_uindex")
                        .IsUnique();

                    b.ToTable("announcementTime", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AutoRole", b =>
                {
                    b.Property<long>("AutoRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("autoRoleID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AutoRoleId"));

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleID");

                    b.HasKey("AutoRoleId")
                        .HasName("autorole_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "AutoRoleId" }, "autorole_autoroleid_uindex")
                        .IsUnique();

                    b.ToTable("autoRole", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AvailableRolesGuild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("availablerolesguild_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "Id" }, "availablerolesguild_id_uindex")
                        .IsUnique();

                    b.ToTable("availableRolesGuild", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Ban", b =>
                {
                    b.Property<long>("BanCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("banCase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BanCase"));

                    b.Property<long?>("Actor")
                        .HasColumnType("bigint")
                        .HasColumnName("actor");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying")
                        .HasColumnName("reason");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("BanCase")
                        .HasName("ban_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "BanCase" }, "ban_mutecase_uindex")
                        .IsUnique();

                    b.ToTable("ban", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Bento", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<int>("Bento1")
                        .HasColumnType("integer")
                        .HasColumnName("bento");

                    b.Property<DateTime>("BentoDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bentoDate")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId")
                        .HasName("bento_pk");

                    b.HasIndex(new[] { "UserId" }, "bento_userid_uindex")
                        .IsUnique();

                    b.ToTable("bento", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Bye", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long?>("Channel")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.Property<string>("Message")
                        .HasColumnType("character varying")
                        .HasColumnName("message");

                    b.HasKey("GuildId")
                        .HasName("bye_pk");

                    b.HasIndex(new[] { "GuildId" }, "bye_guildid_uindex")
                        .IsUnique();

                    b.ToTable("bye", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.CaseGlobal", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<bool>("Reason")
                        .HasColumnType("boolean")
                        .HasColumnName("reason");

                    b.Property<bool>("ServerName")
                        .HasColumnType("boolean")
                        .HasColumnName("serverName");

                    b.HasKey("GuildId")
                        .HasName("caseglobal_pk");

                    b.HasIndex(new[] { "GuildId" }, "caseglobal_guildid_uindex")
                        .IsUnique();

                    b.ToTable("caseGlobal", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.ChannelDisable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channelID");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.HasKey("Id")
                        .HasName("channeldisable_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "ChannelId" }, "channeldisable_channelid_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "channeldisable_id_uindex")
                        .IsUnique();

                    b.ToTable("channelDisable", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.GfycatBlacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("gfycatblacklist_pk");

                    b.HasIndex(new[] { "Id" }, "gfycatblacklist_id_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "gfycatblacklist_username_uindex")
                        .IsUnique();

                    b.ToTable("gfycatBlacklist", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.GfycatPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("messageId");

                    b.HasKey("Id")
                        .HasName("gfycatposts_pk");

                    b.HasIndex(new[] { "Id" }, "gfycatposts_id_uindex")
                        .IsUnique();

                    b.ToTable("gfycatPosts", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.GfycatWordList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("word");

                    b.HasKey("Id")
                        .HasName("gfycatwordlist_pk");

                    b.HasIndex(new[] { "Id" }, "gfycatwordlist_id_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "Word" }, "gfycatwordlist_word_uindex")
                        .IsUnique();

                    b.ToTable("gfycatWordList", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Guild", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("GuildName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guildName");

                    b.Property<string>("Icon")
                        .HasColumnType("character varying")
                        .HasColumnName("icon");

                    b.Property<bool>("Leaderboard")
                        .HasColumnType("boolean")
                        .HasColumnName("leaderboard");

                    b.Property<bool>("Media")
                        .HasColumnType("boolean")
                        .HasColumnName("media");

                    b.Property<int?>("MemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("memberCount");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("prefix");

                    b.Property<bool>("Tiktok")
                        .HasColumnType("boolean")
                        .HasColumnName("tiktok");

                    b.HasKey("GuildId")
                        .HasName("guild_pk");

                    b.HasIndex(new[] { "GuildId" }, "guild_guildid_uindex")
                        .IsUnique();

                    b.ToTable("guild", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.GuildMember", b =>
                {
                    b.Property<long>("GuildMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guildMemberID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GuildMemberId"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("avatarURL");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("GuildMemberId")
                        .HasName("guildmember_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "GuildMemberId" }, "guildmember_guildmemberid_uindex")
                        .IsUnique();

                    b.ToTable("guildMember", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Horoscope", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("UserId")
                        .HasName("horoscope_pk");

                    b.HasIndex(new[] { "UserId" }, "horoscope_userid_uindex")
                        .IsUnique();

                    b.ToTable("horoscope", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Kick", b =>
                {
                    b.Property<long>("KickCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("kickCase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("KickCase"));

                    b.Property<long?>("Actor")
                        .HasColumnType("bigint")
                        .HasColumnName("actor");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying")
                        .HasColumnName("reason");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("KickCase")
                        .HasName("kick_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "KickCase" }, "kick_mutecase_uindex")
                        .IsUnique();

                    b.ToTable("kick", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Lastfm", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("Lastfm1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastfm");

                    b.HasKey("UserId")
                        .HasName("lastfm_pk");

                    b.HasIndex(new[] { "UserId" }, "lastfm_userid_uindex")
                        .IsUnique();

                    b.ToTable("lastfm", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.MemberLog", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("Channel")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.HasKey("GuildId")
                        .HasName("memberlog_pk");

                    b.HasIndex(new[] { "Channel" }, "memberlog_channel_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "GuildId" }, "memberlog_guildid_uindex")
                        .IsUnique();

                    b.ToTable("memberLog", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.MessageLog", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("Channel")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.HasKey("GuildId")
                        .HasName("messagelog_pk");

                    b.HasIndex(new[] { "GuildId" }, "messagelog_guildid_uindex")
                        .IsUnique();

                    b.ToTable("messageLog", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.ModLog", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("Channel")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.HasKey("GuildId")
                        .HasName("modlog_pk");

                    b.HasIndex(new[] { "GuildId" }, "modlog_guildid_uindex")
                        .IsUnique();

                    b.ToTable("modLog", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Mute", b =>
                {
                    b.Property<long>("MuteCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("muteCase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MuteCase"));

                    b.Property<long?>("Actor")
                        .HasColumnType("bigint")
                        .HasColumnName("actor");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<DateTime?>("MuteEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("muteEnd");

                    b.Property<bool>("MuteStatus")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NonBentoMute")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying")
                        .HasColumnName("reason");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("MuteCase")
                        .HasName("mute_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "MuteCase" }, "mute_mutecase_uindex")
                        .IsUnique();

                    b.ToTable("mute", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.MuteRole", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleID");

                    b.HasKey("GuildId")
                        .HasName("muterole_pk");

                    b.HasIndex(new[] { "GuildId" }, "muterole_guildid_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "muterole_role_uindex")
                        .IsUnique();

                    b.ToTable("muteRole", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.NotificationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<bool?>("Global")
                        .HasColumnType("boolean")
                        .HasColumnName("global");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("Id")
                        .HasName("notificationmessage_pk");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "notificationmessage_id_uindex")
                        .IsUnique();

                    b.ToTable("notificationMessage", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Patreon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar");

                    b.Property<bool>("Disciple")
                        .HasColumnType("boolean")
                        .HasColumnName("disciple");

                    b.Property<string>("EmoteSlot1")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot1");

                    b.Property<string>("EmoteSlot2")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot2");

                    b.Property<string>("EmoteSlot3")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot3");

                    b.Property<string>("EmoteSlot4")
                        .HasColumnType("character varying")
                        .HasColumnName("emoteSlot4");

                    b.Property<bool>("Enthusiast")
                        .HasColumnType("boolean")
                        .HasColumnName("enthusiast");

                    b.Property<bool>("Follower")
                        .HasColumnType("boolean")
                        .HasColumnName("follower");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<bool>("Sponsor")
                        .HasColumnType("boolean")
                        .HasColumnName("sponsor");

                    b.Property<bool>("Supporter")
                        .HasColumnType("boolean")
                        .HasColumnName("supporter");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("Id")
                        .HasName("patreon_pk");

                    b.HasIndex(new[] { "Id" }, "patreon_id_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "patreon_userid_uindex")
                        .IsUnique();

                    b.ToTable("patreon", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.PrismaMigration", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<int>("AppliedStepsCount")
                        .HasColumnType("integer")
                        .HasColumnName("applied_steps_count");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("checksum");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("Logs")
                        .HasColumnType("text")
                        .HasColumnName("logs");

                    b.Property<string>("MigrationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("migration_name");

                    b.Property<DateTime?>("RolledBackAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rolled_back_at");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("_prisma_migrations_pkey");

                    b.ToTable("_prisma_migrations", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Profile", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("BackgroundColour")
                        .HasColumnType("character varying")
                        .HasColumnName("backgroundColour");

                    b.Property<int?>("BackgroundColourOpacity")
                        .HasColumnType("integer");

                    b.Property<string>("BackgroundUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("backgroundUrl");

                    b.Property<string>("Birthday")
                        .HasColumnType("character varying")
                        .HasColumnName("birthday");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionColour")
                        .HasColumnType("character varying")
                        .HasColumnName("descriptionColour");

                    b.Property<int?>("DescriptionColourOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("descriptionColourOpacity");

                    b.Property<string>("DiscriminatorColour")
                        .HasColumnType("character varying")
                        .HasColumnName("discriminatorColour");

                    b.Property<string>("FmArtistTextColour")
                        .HasColumnType("character varying")
                        .HasColumnName("fmArtistTextColour");

                    b.Property<int?>("FmArtistTextOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("fmArtistTextOpacity");

                    b.Property<string>("FmDivBgcolour")
                        .HasColumnType("character varying")
                        .HasColumnName("fmDivBGColour");

                    b.Property<int?>("FmDivBgopacity")
                        .HasColumnType("integer")
                        .HasColumnName("fmDivBGOpacity");

                    b.Property<string>("FmSongTextColour")
                        .HasColumnType("character varying")
                        .HasColumnName("fmSongTextColour");

                    b.Property<int?>("FmSongTextOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("fmSongTextOpacity");

                    b.Property<bool?>("LastfmBoard")
                        .HasColumnType("boolean")
                        .HasColumnName("lastfmBoard");

                    b.Property<string>("OverlayColour")
                        .HasColumnType("character varying")
                        .HasColumnName("overlayColour");

                    b.Property<int?>("OverlayOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("overlayOpacity");

                    b.Property<int?>("SidebarBlur")
                        .HasColumnType("integer")
                        .HasColumnName("sidebarBlur");

                    b.Property<string>("SidebarColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarColour");

                    b.Property<string>("SidebarItemBentoColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemBentoColour");

                    b.Property<string>("SidebarItemGlobalColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemGlobalColour");

                    b.Property<string>("SidebarItemServerColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemServerColour");

                    b.Property<string>("SidebarItemTimezoneColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarItemTimezoneColour");

                    b.Property<int?>("SidebarOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("sidebarOpacity");

                    b.Property<string>("SidebarValueBentoColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarValueBentoColour");

                    b.Property<string>("SidebarValueGlobalColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarValueGlobalColour");

                    b.Property<string>("SidebarValueServerColour")
                        .HasColumnType("character varying")
                        .HasColumnName("sidebarValueServerColour");

                    b.Property<string>("Timezone")
                        .HasColumnType("character varying")
                        .HasColumnName("timezone");

                    b.Property<string>("UsernameColour")
                        .HasColumnType("character varying")
                        .HasColumnName("usernameColour");

                    b.Property<string>("XpBar2Colour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpBar2Colour");

                    b.Property<int?>("XpBar2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpBar2Opacity");

                    b.Property<string>("XpBarColour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpBarColour");

                    b.Property<int?>("XpBarOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpBarOpacity");

                    b.Property<bool?>("XpBoard")
                        .HasColumnType("boolean")
                        .HasColumnName("xpBoard");

                    b.Property<string>("XpDivBgcolour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDivBGColour");

                    b.Property<int?>("XpDivBgopacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDivBGOpacity");

                    b.Property<string>("XpDoneGlobalColour1")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneGlobalColour1");

                    b.Property<int?>("XpDoneGlobalColour1Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneGlobalColour1Opacity");

                    b.Property<string>("XpDoneGlobalColour2")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneGlobalColour2");

                    b.Property<int?>("XpDoneGlobalColour2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneGlobalColour2Opacity");

                    b.Property<string>("XpDoneGlobalColour3")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneGlobalColour3");

                    b.Property<int?>("XpDoneGlobalColour3Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneGlobalColour3Opacity");

                    b.Property<string>("XpDoneServerColour1")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneServerColour1");

                    b.Property<int?>("XpDoneServerColour1Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneServerColour1Opacity");

                    b.Property<string>("XpDoneServerColour2")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneServerColour2");

                    b.Property<int?>("XpDoneServerColour2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneServerColour2Opacity");

                    b.Property<string>("XpDoneServerColour3")
                        .HasColumnType("character varying")
                        .HasColumnName("xpDoneServerColour3");

                    b.Property<int?>("XpDoneServerColour3Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpDoneServerColour3Opacity");

                    b.Property<string>("XpText2Colour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpText2Colour");

                    b.Property<int?>("XpText2Opacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpText2Opacity");

                    b.Property<string>("XpTextColour")
                        .HasColumnType("character varying")
                        .HasColumnName("xpTextColour");

                    b.Property<int?>("XpTextOpacity")
                        .HasColumnType("integer")
                        .HasColumnName("xpTextOpacity");

                    b.HasKey("UserId")
                        .HasName("profile_pk");

                    b.HasIndex(new[] { "UserId" }, "profile_userid_uindex")
                        .IsUnique();

                    b.ToTable("profile", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Reminder1")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("reminder");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("Id")
                        .HasName("reminder_pk");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "reminder_id_uindex")
                        .IsUnique();

                    b.ToTable("reminder", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("RoleCommand")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("roleCommand");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleID");

                    b.Property<string>("RoleName")
                        .HasColumnType("character varying")
                        .HasColumnName("roleName");

                    b.HasKey("Id")
                        .HasName("role_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "Id" }, "role_id_uindex")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RoleChannel", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channelID");

                    b.HasKey("GuildId")
                        .HasName("rolechannel_pk");

                    b.HasIndex(new[] { "ChannelId" }, "rolechannel_channelid_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "GuildId" }, "rolechannel_guildid_uindex")
                        .IsUnique();

                    b.ToTable("roleChannel", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RoleMessage", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("Message")
                        .HasColumnType("character varying")
                        .HasColumnName("message");

                    b.Property<long?>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("messageID");

                    b.HasKey("GuildId")
                        .HasName("rolemessages_pk");

                    b.ToTable("roleMessages", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RpsGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PaperLosses")
                        .HasColumnType("integer")
                        .HasColumnName("paperLosses");

                    b.Property<int?>("PaperTies")
                        .HasColumnType("integer")
                        .HasColumnName("paperTies");

                    b.Property<int?>("PaperWins")
                        .HasColumnType("integer")
                        .HasColumnName("paperWins");

                    b.Property<int?>("RockLosses")
                        .HasColumnType("integer")
                        .HasColumnName("rockLosses");

                    b.Property<int?>("RockTies")
                        .HasColumnType("integer")
                        .HasColumnName("rockTies");

                    b.Property<int?>("RockWins")
                        .HasColumnType("integer")
                        .HasColumnName("rockWins");

                    b.Property<int?>("ScissorWins")
                        .HasColumnType("integer")
                        .HasColumnName("scissorWins");

                    b.Property<int?>("ScissorsLosses")
                        .HasColumnType("integer")
                        .HasColumnName("scissorsLosses");

                    b.Property<int?>("ScissorsTies")
                        .HasColumnType("integer")
                        .HasColumnName("scissorsTies");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("Id")
                        .HasName("rpsgame_pk");

                    b.HasIndex(new[] { "Id" }, "rpsgame_id_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "rpsgame_userid_uindex")
                        .IsUnique();

                    b.ToTable("rpsGame", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tagID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TagId"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("command");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("TagId")
                        .HasName("tag_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TagId" }, "tag_tagid_uindex")
                        .IsUnique();

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("avatarURL");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("discriminator");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Username")
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("UserId")
                        .HasName("user_pk");

                    b.HasIndex(new[] { "UserId" }, "user_userid_uindex")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Warning", b =>
                {
                    b.Property<long>("WarningCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("warningCase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("WarningCase"));

                    b.Property<long>("Actor")
                        .HasColumnType("bigint")
                        .HasColumnName("actor");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying")
                        .HasColumnName("reason");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.HasKey("WarningCase")
                        .HasName("warning_pk");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "WarningCase" }, "warning_mutecase_uindex")
                        .IsUnique();

                    b.ToTable("warning", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Weather", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userID");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.HasKey("UserId")
                        .HasName("weather_pk");

                    b.HasIndex(new[] { "UserId" }, "weather_userid_uindex")
                        .IsUnique();

                    b.ToTable("weather", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Welcome", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guildID");

                    b.Property<long?>("Channel")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.Property<string>("Message")
                        .HasColumnType("character varying")
                        .HasColumnName("message");

                    b.HasKey("GuildId")
                        .HasName("welcome_pk");

                    b.HasIndex(new[] { "GuildId" }, "welcome_guildid_uindex")
                        .IsUnique();

                    b.ToTable("welcome", (string)null);
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AnnouncementSchedule", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("AnnouncementSchedules")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("announcementschedule_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AnnouncementTime", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("AnnouncementTimes")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("announcementtime_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AutoRole", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("AutoRoles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("autorole_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.AvailableRolesGuild", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("AvailableRolesGuilds")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("availablerolesguild_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Ban", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("Bans")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ban_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Bento", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Bento")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Bento", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bento_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Bye", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("Bye")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Bye", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bye_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.CaseGlobal", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("CaseGlobal")
                        .HasForeignKey("dotBento.EntityFramework.Entities.CaseGlobal", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("caseglobal_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.ChannelDisable", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("ChannelDisables")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("channeldisable_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.GuildMember", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("GuildMembers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("guildmember_guild_guildid_fk");

                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithMany("GuildMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("guildmember_user_userid_fk");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Horoscope", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Horoscope")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Horoscope", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("horoscope_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Kick", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("Kicks")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("kick_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Lastfm", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Lastfm")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Lastfm", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lastfm_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.MemberLog", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("MemberLog")
                        .HasForeignKey("dotBento.EntityFramework.Entities.MemberLog", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("memberlog_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.MessageLog", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("MessageLog")
                        .HasForeignKey("dotBento.EntityFramework.Entities.MessageLog", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messagelog_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.ModLog", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("ModLog")
                        .HasForeignKey("dotBento.EntityFramework.Entities.ModLog", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("modlog_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Mute", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("Mutes")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mute_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.MuteRole", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("MuteRole")
                        .HasForeignKey("dotBento.EntityFramework.Entities.MuteRole", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("muterole_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.NotificationMessage", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithMany("NotificationMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notificationmessage_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Patreon", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Patreon")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Patreon", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("patreon_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Profile", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("profile_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Reminder", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reminder_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Role", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("Roles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RoleChannel", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("RoleChannel")
                        .HasForeignKey("dotBento.EntityFramework.Entities.RoleChannel", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rolechannel_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RoleMessage", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("RoleMessage")
                        .HasForeignKey("dotBento.EntityFramework.Entities.RoleMessage", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rolemessages_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.RpsGame", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("RpsGame")
                        .HasForeignKey("dotBento.EntityFramework.Entities.RpsGame", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rpsgame_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Tag", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("Tags")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tag_guild_guildid_fk");

                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tag_user_userid_fk");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Warning", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithMany("Warnings")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("warning_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Weather", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.User", "User")
                        .WithOne("Weather")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Weather", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("weather_user_userid_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Welcome", b =>
                {
                    b.HasOne("dotBento.EntityFramework.Entities.Guild", "Guild")
                        .WithOne("Welcome")
                        .HasForeignKey("dotBento.EntityFramework.Entities.Welcome", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("welcome_guild_guildid_fk");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.Guild", b =>
                {
                    b.Navigation("AnnouncementSchedules");

                    b.Navigation("AnnouncementTimes");

                    b.Navigation("AutoRoles");

                    b.Navigation("AvailableRolesGuilds");

                    b.Navigation("Bans");

                    b.Navigation("Bye");

                    b.Navigation("CaseGlobal");

                    b.Navigation("ChannelDisables");

                    b.Navigation("GuildMembers");

                    b.Navigation("Kicks");

                    b.Navigation("MemberLog");

                    b.Navigation("MessageLog");

                    b.Navigation("ModLog");

                    b.Navigation("MuteRole");

                    b.Navigation("Mutes");

                    b.Navigation("RoleChannel");

                    b.Navigation("RoleMessage");

                    b.Navigation("Roles");

                    b.Navigation("Tags");

                    b.Navigation("Warnings");

                    b.Navigation("Welcome");
                });

            modelBuilder.Entity("dotBento.EntityFramework.Entities.User", b =>
                {
                    b.Navigation("Bento");

                    b.Navigation("GuildMembers");

                    b.Navigation("Horoscope");

                    b.Navigation("Lastfm");

                    b.Navigation("NotificationMessages");

                    b.Navigation("Patreon");

                    b.Navigation("Profile");

                    b.Navigation("Reminders");

                    b.Navigation("RpsGame");

                    b.Navigation("Tags");

                    b.Navigation("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
